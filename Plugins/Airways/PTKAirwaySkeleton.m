classdef PTKAirwaySkeleton < PTKPlugin
    % PTKAirwaySkeleton. Plugin for finding the centreline of the pulmonary airway tree.
    %
    %     This is a plugin for the Pulmonary Toolkit. Plugins can be run using 
    %     the gui, or through the interfaces provided by the Pulmonary Toolkit.
    %     See PTKPlugin.m for more information on how to run plugins.
    %
    %     Plugins should not be run directly from your code.
    %
    %     PTKAirwayCentreline calls the PTKAirways plugin to segment the airway
    %     tree. It then uses the PTKSkeletonise library routine to reduce the
    %     airway tree to a centreline. The results are stored in a heirarchical
    %     tree structure.
    %
    %     The output image generated by GenerateImageFromResults creates a
    %     colour-coded segmentation image showing skeleton points as colour 1,
    %     bifurcation points as 3 and removed internal loop points as 6.
    %
    %
    %     Licence
    %     -------
    %     Part of the TD Pulmonary Toolkit. https://github.com/tomdoel/pulmonarytoolkit
    %     Author: Tom Doel, 2012.  www.tomdoel.com
    %     Distributed under the GNU GPL v3 licence. Please see website for details.
    %    
    
    
    
    properties
        ButtonText = 'Airway <BR>Skeleton'
        ToolTip = 'Show airway skeletonisation results processed globally'
        Category = 'Airways'

        AllowResultsToBeCached = true
        AlwaysRunPlugin = false
        PluginType = 'ReplaceOverlay'
        HidePluginInDisplay = false
        FlattenPreviewImage = true
        PTKVersion = '1'
        ButtonWidth = 6
        ButtonHeight = 2
        GeneratePreview = true
        Visibility = 'Developer'
    end
    
    methods (Static)
        function results = RunPlugin(dataset, reporting)
            lung_image = dataset.GetResult('PTKLungROI');
            airway_results = dataset.GetResult('PTKAirways');
            results = PTKGetCentrelineFromAirways(airway_results, lung_image, reporting);
        end

        function results = GenerateImageFromResults(skeleton_results, image_templates, ~)
            template_image = image_templates.GetTemplateImage(PTKContext.LungROI);

            new_image = zeros(template_image.ImageSize, 'uint8');
            new_image(template_image.GlobalToLocalIndices(skeleton_results.OriginalCentrelinePoints)) = 2;
            new_image(template_image.GlobalToLocalIndices(skeleton_results.CentrelinePoints)) = 1;
            new_image(template_image.GlobalToLocalIndices(skeleton_results.RemovedPoints)) = 6;
            new_image(template_image.GlobalToLocalIndices(skeleton_results.BifurcationPoints)) = 3;
            
            results = template_image.BlankCopy();
            results.ChangeRawImage(new_image);
            results.ImageType = PTKImageType.Colormap;
            
            results.SetVoxelToThis(skeleton_results.StartPoint, 4);
            
        end
    end
end
